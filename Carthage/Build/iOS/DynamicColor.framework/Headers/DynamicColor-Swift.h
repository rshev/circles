// Generated by Apple Swift version 1.2 (swiftlang-602.0.53.1 clang-602.0.53)
#pragma clang diagnostic push

#if defined(__has_include) && __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if defined(__has_include) && __has_include(<uchar.h>)
# include <uchar.h>
#elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
#endif

typedef struct _NSZone NSZone;

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif

#if defined(__has_attribute) && __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if defined(__has_attribute) && __has_attribute(objc_subclassing_restricted) 
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if defined(__has_attribute) && __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_EXTRA _name : _type
#endif
#if __has_feature(nullability)
#  define SWIFT_NULLABILITY(X) X
#else
# if !defined(__nonnull)
#  define __nonnull
# endif
# if !defined(__nullable)
#  define __nullable
# endif
# if !defined(__null_unspecified)
#  define __null_unspecified
# endif
#  define SWIFT_NULLABILITY(X)
#endif
#if defined(__has_feature) && __has_feature(modules)
@import UIKit;
@import CoreGraphics;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"

@interface UIColor (SWIFT_EXTENSION(DynamicColor))

/// Creates a color from an hex string.
///
/// \param hexString A hexa-decimal color string representation.
- (SWIFT_NULLABILITY(nonnull) instancetype)initWithHexString:(NSString * __nonnull)hexString;

/// Creates a color from an hex int.
///
/// \param hex A hexa-decimal integer (<code>UInt32</code>) that represents a color.
- (SWIFT_NULLABILITY(nonnull) instancetype)initWithHex:(uint32_t)hex;

/// Returns the color representation as hexadecimal string.
///
/// \returns A string similar to this pattern "#f4003b"
- (NSString * __nonnull)toHexString;

/// Returns the red component.
///
/// \returns The red component as CGFloat.
- (CGFloat)redComponent;

/// Returns the green component.
///
/// \returns The green component as CGFloat.
- (CGFloat)greenComponent;

/// Returns the blue component.
///
/// \returns The blue component as CGFloat.
- (CGFloat)blueComponent;

/// Returns the alpha component.
///
/// \returns The alpha component as CGFloat.
- (CGFloat)alphaComponent;

/// Returns a boolean value that indicates whether the receiver is equal to the given hexa-decimal string.
///
/// \param hexString A hexa-decimal color number representation to be compared to the receiver.
///
/// \returns true if the receiver and the string are equal, otherwise false.
- (BOOL)isEqualToHexString:(NSString * __nonnull)hexString;

/// Creates and returns a color object with the hue rotated along the color wheel by the given amount.
///
/// \param amount A float representing the number of degrees as ratio (usually -1 for -360deg and 1 for 360deg).
///
/// \returns A UIColor object with the hue changed.
- (UIColor * __nonnull)adjustedHueColor:(CGFloat)amount;

/// Creates and returns the complement of the color object.
///
/// This is identical to adjustedHueColor(0.5).
///
/// <dl><dt>see</dt><dd><p>adjustedHueColor:</p></dd></dl>
/// \returns The complement UIColor.
- (UIColor * __nonnull)complementColor;

/// Creates and returns a lighter color object.
///
/// <dl><dt>see</dt><dd><p>lightenColor:</p></dd></dl>
/// \returns An UIColor lightened with an amount of 0.2.
- (UIColor * __nonnull)lighterColor;

/// Creates and returns a color object with the lightness increased by the given amount.
///
/// \param amount Float between 0 and 1.
///
/// \returns A lighter UIColor.
- (UIColor * __nonnull)lightenColor:(CGFloat)amount;

/// Creates and returns a darker color object.
///
/// <dl><dt>see</dt><dd><p>darkenColor:</p></dd></dl>
/// \returns A UIColor darkened with an amount of 0.2.
- (UIColor * __nonnull)darkerColor;

/// Creates and returns a color object with the lightness decreased by the given amount.
///
/// \param amount Float between 0 and 1.
///
/// \returns A darker UIColor.
- (UIColor * __nonnull)darkenColor:(CGFloat)amount;

/// Creates and returns a color object with the saturation increased by the given amount.
///
/// <dl><dt>see</dt><dd><p>saturateColor:</p></dd></dl>
/// \returns A UIColor more saturated with an amount of 0.2.
- (UIColor * __nonnull)saturatedColor;

/// Creates and returns a color object with the saturation increased by the given amount.
///
/// \param amount Float between 0 and 1.
///
/// \returns A UIColor more saturated.
- (UIColor * __nonnull)saturateColor:(CGFloat)amount;

/// Creates and returns a color object with the saturation decreased by the given amount.
///
/// <dl><dt>see</dt><dd><p>desaturateColor:</p></dd></dl>
/// \returns A UIColor less saturated with an amount of 0.2.
- (UIColor * __nonnull)desaturatedColor;

/// Creates and returns a color object with the saturation decreased by the given amount.
///
/// \param amount Float between 0 and 1.
///
/// \returns A UIColor less saturated.
- (UIColor * __nonnull)desaturateColor:(CGFloat)amount;

/// Creates and returns a color object converted to grayscale.
///
/// This is identical to desaturateColor(1).
///
/// <dl><dt>see</dt><dd><p>desaturateColor:</p></dd></dl>
/// \returns A grayscale UIColor.
- (UIColor * __nonnull)grayscaledColor;

/// Creates and return a color object where the red, green, and blue values are inverted, while the opacity is left alone.
///
/// \returns An inverse (negative) of the original color.
- (UIColor * __nonnull)invertColor;

/// Mixes the given color object with the receiver.
///
/// Specifically, takes the average of each of the RGB components, optionally weighted by the given percentage. The opacity of the colors object is also considered when weighting the components.
///
/// \param color A color object to mix with the receiver.
///
/// \param weight The weight specifies the amount of the given color object (between 0 and 1). The default value is 0.5, which means that half the given color and half the receiver color object should be used. 0.25 means that a quarter of the given color object and three quarters of the receiver color object should be used.
///
/// \returns A color object corresponding to the two colors object mixed together.
- (UIColor * __nonnull)mixWithColor:(UIColor * __nonnull)color weight:(CGFloat)weight;

/// Creates and returns a color object corresponding to the mix of the receiver and an amount of white color, which increases lightness.
///
/// \param amount Float between 0 and 1. The default amount is equal to 0.2.
///
/// \returns A lighter UIColor.
- (UIColor * __nonnull)tintColorWithAmount:(CGFloat)amount;

/// Creates and returns a color object corresponding to the mix of the receiver and an amount of black color, which reduces lightness.
///
/// \param amount Float between 0 and 1. The default amount is equal to 0.2.
///
/// \returns A darker UIColor.
- (UIColor * __nonnull)shadeColorWithAmount:(CGFloat)amount;
@end

#pragma clang diagnostic pop
